/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LangRouteRouteImport } from './routes/$lang/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LangIndexRouteImport } from './routes/$lang/index'
import { Route as LangDocsRouteRouteImport } from './routes/$lang/docs/route'
import { Route as LangDocsIndexRouteImport } from './routes/$lang/docs/index'
import { Route as LangDocsFrameworkRouteRouteImport } from './routes/$lang/docs/$framework/route'
import { Route as LangDocsFrameworkOverviewRouteImport } from './routes/$lang/docs/$framework/overview'
import { Route as LangDocsFrameworkInstallationRouteImport } from './routes/$lang/docs/$framework/installation'
import { Route as LangDocsFrameworkComponentsButtonRouteImport } from './routes/$lang/docs/$framework/components/button'
import { Route as LangDocsFrameworkComponentsAnchorRouteImport } from './routes/$lang/docs/$framework/components/anchor'
import { ServerRoute as ApiPageInfoIndexServerRouteImport } from './routes/api/page-info/index'

const rootServerRouteImport = createServerRootRoute()

const LangRouteRoute = LangRouteRouteImport.update({
  id: '/$lang',
  path: '/$lang',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LangIndexRoute = LangIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LangRouteRoute,
} as any)
const LangDocsRouteRoute = LangDocsRouteRouteImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => LangRouteRoute,
} as any)
const LangDocsIndexRoute = LangDocsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LangDocsRouteRoute,
} as any)
const LangDocsFrameworkRouteRoute = LangDocsFrameworkRouteRouteImport.update({
  id: '/$framework',
  path: '/$framework',
  getParentRoute: () => LangDocsRouteRoute,
} as any)
const LangDocsFrameworkOverviewRoute =
  LangDocsFrameworkOverviewRouteImport.update({
    id: '/overview',
    path: '/overview',
    getParentRoute: () => LangDocsFrameworkRouteRoute,
  } as any)
const LangDocsFrameworkInstallationRoute =
  LangDocsFrameworkInstallationRouteImport.update({
    id: '/installation',
    path: '/installation',
    getParentRoute: () => LangDocsFrameworkRouteRoute,
  } as any)
const LangDocsFrameworkComponentsButtonRoute =
  LangDocsFrameworkComponentsButtonRouteImport.update({
    id: '/components/button',
    path: '/components/button',
    getParentRoute: () => LangDocsFrameworkRouteRoute,
  } as any)
const LangDocsFrameworkComponentsAnchorRoute =
  LangDocsFrameworkComponentsAnchorRouteImport.update({
    id: '/components/anchor',
    path: '/components/anchor',
    getParentRoute: () => LangDocsFrameworkRouteRoute,
  } as any)
const ApiPageInfoIndexServerRoute = ApiPageInfoIndexServerRouteImport.update({
  id: '/api/page-info/',
  path: '/api/page-info/',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$lang': typeof LangRouteRouteWithChildren
  '/$lang/docs': typeof LangDocsRouteRouteWithChildren
  '/$lang/': typeof LangIndexRoute
  '/$lang/docs/$framework': typeof LangDocsFrameworkRouteRouteWithChildren
  '/$lang/docs/': typeof LangDocsIndexRoute
  '/$lang/docs/$framework/installation': typeof LangDocsFrameworkInstallationRoute
  '/$lang/docs/$framework/overview': typeof LangDocsFrameworkOverviewRoute
  '/$lang/docs/$framework/components/anchor': typeof LangDocsFrameworkComponentsAnchorRoute
  '/$lang/docs/$framework/components/button': typeof LangDocsFrameworkComponentsButtonRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$lang': typeof LangIndexRoute
  '/$lang/docs/$framework': typeof LangDocsFrameworkRouteRouteWithChildren
  '/$lang/docs': typeof LangDocsIndexRoute
  '/$lang/docs/$framework/installation': typeof LangDocsFrameworkInstallationRoute
  '/$lang/docs/$framework/overview': typeof LangDocsFrameworkOverviewRoute
  '/$lang/docs/$framework/components/anchor': typeof LangDocsFrameworkComponentsAnchorRoute
  '/$lang/docs/$framework/components/button': typeof LangDocsFrameworkComponentsButtonRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$lang': typeof LangRouteRouteWithChildren
  '/$lang/docs': typeof LangDocsRouteRouteWithChildren
  '/$lang/': typeof LangIndexRoute
  '/$lang/docs/$framework': typeof LangDocsFrameworkRouteRouteWithChildren
  '/$lang/docs/': typeof LangDocsIndexRoute
  '/$lang/docs/$framework/installation': typeof LangDocsFrameworkInstallationRoute
  '/$lang/docs/$framework/overview': typeof LangDocsFrameworkOverviewRoute
  '/$lang/docs/$framework/components/anchor': typeof LangDocsFrameworkComponentsAnchorRoute
  '/$lang/docs/$framework/components/button': typeof LangDocsFrameworkComponentsButtonRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$lang'
    | '/$lang/docs'
    | '/$lang/'
    | '/$lang/docs/$framework'
    | '/$lang/docs/'
    | '/$lang/docs/$framework/installation'
    | '/$lang/docs/$framework/overview'
    | '/$lang/docs/$framework/components/anchor'
    | '/$lang/docs/$framework/components/button'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$lang'
    | '/$lang/docs/$framework'
    | '/$lang/docs'
    | '/$lang/docs/$framework/installation'
    | '/$lang/docs/$framework/overview'
    | '/$lang/docs/$framework/components/anchor'
    | '/$lang/docs/$framework/components/button'
  id:
    | '__root__'
    | '/'
    | '/$lang'
    | '/$lang/docs'
    | '/$lang/'
    | '/$lang/docs/$framework'
    | '/$lang/docs/'
    | '/$lang/docs/$framework/installation'
    | '/$lang/docs/$framework/overview'
    | '/$lang/docs/$framework/components/anchor'
    | '/$lang/docs/$framework/components/button'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LangRouteRoute: typeof LangRouteRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/page-info': typeof ApiPageInfoIndexServerRoute
}
export interface FileServerRoutesByTo {
  '/api/page-info': typeof ApiPageInfoIndexServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/page-info/': typeof ApiPageInfoIndexServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/page-info'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/page-info'
  id: '__root__' | '/api/page-info/'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiPageInfoIndexServerRoute: typeof ApiPageInfoIndexServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$lang': {
      id: '/$lang'
      path: '/$lang'
      fullPath: '/$lang'
      preLoaderRoute: typeof LangRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$lang/': {
      id: '/$lang/'
      path: '/'
      fullPath: '/$lang/'
      preLoaderRoute: typeof LangIndexRouteImport
      parentRoute: typeof LangRouteRoute
    }
    '/$lang/docs': {
      id: '/$lang/docs'
      path: '/docs'
      fullPath: '/$lang/docs'
      preLoaderRoute: typeof LangDocsRouteRouteImport
      parentRoute: typeof LangRouteRoute
    }
    '/$lang/docs/': {
      id: '/$lang/docs/'
      path: '/'
      fullPath: '/$lang/docs/'
      preLoaderRoute: typeof LangDocsIndexRouteImport
      parentRoute: typeof LangDocsRouteRoute
    }
    '/$lang/docs/$framework': {
      id: '/$lang/docs/$framework'
      path: '/$framework'
      fullPath: '/$lang/docs/$framework'
      preLoaderRoute: typeof LangDocsFrameworkRouteRouteImport
      parentRoute: typeof LangDocsRouteRoute
    }
    '/$lang/docs/$framework/overview': {
      id: '/$lang/docs/$framework/overview'
      path: '/overview'
      fullPath: '/$lang/docs/$framework/overview'
      preLoaderRoute: typeof LangDocsFrameworkOverviewRouteImport
      parentRoute: typeof LangDocsFrameworkRouteRoute
    }
    '/$lang/docs/$framework/installation': {
      id: '/$lang/docs/$framework/installation'
      path: '/installation'
      fullPath: '/$lang/docs/$framework/installation'
      preLoaderRoute: typeof LangDocsFrameworkInstallationRouteImport
      parentRoute: typeof LangDocsFrameworkRouteRoute
    }
    '/$lang/docs/$framework/components/button': {
      id: '/$lang/docs/$framework/components/button'
      path: '/components/button'
      fullPath: '/$lang/docs/$framework/components/button'
      preLoaderRoute: typeof LangDocsFrameworkComponentsButtonRouteImport
      parentRoute: typeof LangDocsFrameworkRouteRoute
    }
    '/$lang/docs/$framework/components/anchor': {
      id: '/$lang/docs/$framework/components/anchor'
      path: '/components/anchor'
      fullPath: '/$lang/docs/$framework/components/anchor'
      preLoaderRoute: typeof LangDocsFrameworkComponentsAnchorRouteImport
      parentRoute: typeof LangDocsFrameworkRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/page-info/': {
      id: '/api/page-info/'
      path: '/api/page-info'
      fullPath: '/api/page-info'
      preLoaderRoute: typeof ApiPageInfoIndexServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface LangDocsFrameworkRouteRouteChildren {
  LangDocsFrameworkInstallationRoute: typeof LangDocsFrameworkInstallationRoute
  LangDocsFrameworkOverviewRoute: typeof LangDocsFrameworkOverviewRoute
  LangDocsFrameworkComponentsAnchorRoute: typeof LangDocsFrameworkComponentsAnchorRoute
  LangDocsFrameworkComponentsButtonRoute: typeof LangDocsFrameworkComponentsButtonRoute
}

const LangDocsFrameworkRouteRouteChildren: LangDocsFrameworkRouteRouteChildren =
  {
    LangDocsFrameworkInstallationRoute: LangDocsFrameworkInstallationRoute,
    LangDocsFrameworkOverviewRoute: LangDocsFrameworkOverviewRoute,
    LangDocsFrameworkComponentsAnchorRoute:
      LangDocsFrameworkComponentsAnchorRoute,
    LangDocsFrameworkComponentsButtonRoute:
      LangDocsFrameworkComponentsButtonRoute,
  }

const LangDocsFrameworkRouteRouteWithChildren =
  LangDocsFrameworkRouteRoute._addFileChildren(
    LangDocsFrameworkRouteRouteChildren,
  )

interface LangDocsRouteRouteChildren {
  LangDocsFrameworkRouteRoute: typeof LangDocsFrameworkRouteRouteWithChildren
  LangDocsIndexRoute: typeof LangDocsIndexRoute
}

const LangDocsRouteRouteChildren: LangDocsRouteRouteChildren = {
  LangDocsFrameworkRouteRoute: LangDocsFrameworkRouteRouteWithChildren,
  LangDocsIndexRoute: LangDocsIndexRoute,
}

const LangDocsRouteRouteWithChildren = LangDocsRouteRoute._addFileChildren(
  LangDocsRouteRouteChildren,
)

interface LangRouteRouteChildren {
  LangDocsRouteRoute: typeof LangDocsRouteRouteWithChildren
  LangIndexRoute: typeof LangIndexRoute
}

const LangRouteRouteChildren: LangRouteRouteChildren = {
  LangDocsRouteRoute: LangDocsRouteRouteWithChildren,
  LangIndexRoute: LangIndexRoute,
}

const LangRouteRouteWithChildren = LangRouteRoute._addFileChildren(
  LangRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LangRouteRoute: LangRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiPageInfoIndexServerRoute: ApiPageInfoIndexServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
